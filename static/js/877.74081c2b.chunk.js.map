{"version":3,"file":"static/js/877.74081c2b.chunk.js","mappings":"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","sources":["pages/MovieInfo.styled.js","pages/MovieInfo.js","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const MovieWrap = styled.section`\n    display: flex;\n    padding: 20px;\n    border-bottom: 1px grey solid;\n`;\n\nexport const InfoContainer = styled.div`\n  margin-left: 30px;\n`;\n\nexport const ButtonBack = styled(Link)`\n  text-decoration: none;\n  display: block;\n  margin-bottom: 10px;\n  color: darkblue;\n\n    &:hover {\n      color: blue;\n    }\n`;\n\nexport const MovieTitle = styled.h2`\n  margin: 26px 0;\n`;\n\nexport const AdditionalWrap = styled.section`\n`;\n\nexport const AdditionalText = styled.h3`\n  margin-left: 20px;\n`;\n\nexport const AdditionalList = styled.ul`\n  list-style: none;\n  display: flex;\n  padding-left: 20px;\n`;\n\nexport const ListItem = styled.li`\nmargin-left: 20px;\n`;\n\nexport const ListItemLink = styled(Link)`\n    border-radius: 10px;\n    text-decoration: none;\n    font-size: 18px;\n    color: darkblue;\n\n    :hover,\n    :focus {\n        color: blue;\n    }\n`;","import { useEffect, useState, Suspense } from \"react\";\nimport { Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { getMovieDetails } from \"services/api\";\nimport {MovieWrap, InfoContainer, ButtonBack, MovieTitle, AdditionalWrap, AdditionalText,\nAdditionalList, ListItem, ListItemLink } from './MovieInfo.styled';\n// import { RotatingLines } from \"react-loader-spinner\";\n\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w300';\n\n\nconst MovieInfo = () => {\n    const { movieId } = useParams();\n    const [movieInfo, setMovieInfo] = useState({});\n    const location = useLocation();\n    const backLink = location?.state?.from ?? '/'\n\n    useEffect(() => {\n        setTimeout(()=>{getMovieDetails(movieId).then(setMovieInfo);}, 3000)\n        \n    }, [movieId]);\n\n    if (Object.keys(movieInfo).length === 0) {\n        return null;\n    }\n\n    const {vote_average, title, overview, genres, poster_path, release_date} = movieInfo;\n    const posterLink = BASE_POSTER_URL + poster_path;\n    const userScore = parseInt(vote_average * 10);\n    const genresInfo = genres.map(a => a.name).join(\" \");\n    const releaseYear = release_date.split('-')[0];\n\n    return (<>\n        <MovieWrap>\n            <div>\n                <ButtonBack to={backLink}>Go Back</ButtonBack>\n                <img src={posterLink} alt={`${title} poster`} />\n            </div>\n            <InfoContainer>\n                <MovieTitle>{title} ({releaseYear})</MovieTitle>\n                <p>User Score: {userScore}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genresInfo}</p>\n            </InfoContainer>\n        </MovieWrap>\n        <AdditionalWrap>\n        <AdditionalText>Additional information</AdditionalText>\n        <AdditionalList>\n            <ListItem>\n            <ListItemLink to='cast' state={location.state}>Cast</ListItemLink>\n            </ListItem>\n            <ListItem>\n            <ListItemLink to='reviews' state={location.state}>Reviews</ListItemLink>\n            </ListItem>\n        </AdditionalList>\n        </AdditionalWrap>\n            <Suspense fallback={<div>Loading...</div>}>\n            <Outlet/>\n            </Suspense >\n    </>\n    )\n}\n\nexport default MovieInfo;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"b39d2fa1d0f98778a06603bc9566573a\";\n\nexport const getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    const trendingMovies = response.data.results.map(movie => {\n        const {id, title} = movie;\n        return {\n            id,\n            title\n        }\n    })\n    return trendingMovies;\n};\n\nexport const getMovieOnSearch = (searchQuery) => {\n    return fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`)\n        .then(response => response.json())\n        .then(data => {\n            const movieList = data.results.map(movie => {\n                const { id, title } = movie;\n                return {\n                    id,\n                    title\n                }\n            })\n    \n            if (movieList.length === 0) {\n                alert(\"We can't found anythings, please repeate your request\")\n                return [];\n            }\n\n            return movieList;\n        });\n}\n\nexport const getMovieDetails = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n    const {vote_average, title, overview, genres, poster_path, release_date} = response.data;\n\n    return {\n        vote_average,\n        title,\n        overview,\n        genres, \n        poster_path,\n        release_date}\n};\n\nexport const getMovieCast = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n\n    const castInfo = response.data.cast.map(a => {\n        const {name, character, profile_path, id} = a;\n        return {\n            name,\n            character,\n            profile_path,\n            id}\n    });\n\n    return castInfo;\n};\n\nexport const getMovieReviews = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data.results.map(a => {\n        const {id, author, content } = a;\n        return {\n            id,\n            author,\n            content}\n    });  \n    \n    return reviews;\n}"],"names":["MovieWrap","styled","InfoContainer","ButtonBack","Link","MovieTitle","AdditionalWrap","AdditionalText","AdditionalList","ListItem","ListItemLink","movieId","useParams","useState","movieInfo","setMovieInfo","location","useLocation","backLink","state","from","useEffect","setTimeout","getMovieDetails","then","Object","keys","length","vote_average","title","overview","genres","poster_path","release_date","posterLink","userScore","parseInt","genresInfo","map","a","name","join","releaseYear","split","to","src","alt","Suspense","fallback","axios","API_KEY","getTrendingMovies","response","trendingMovies","data","results","movie","id","getMovieOnSearch","searchQuery","fetch","json","movieList","alert","getMovieCast","castInfo","cast","character","profile_path","getMovieReviews","reviews","author","content"],"sourceRoot":""}
{"version":3,"file":"static/js/806.e63900ec.chunk.js","mappings":"qPAEaA,EAAcC,EAAAA,GAAAA,EAAH,2CAIXC,EAAcD,EAAAA,GAAAA,GAAH,2EAKXE,EAAkBF,EAAAA,GAAAA,GAAH,wBAGfG,EAAiBH,EAAAA,GAAAA,EAAH,4K,SCmB3B,EA5BgB,WACZ,IAAOI,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAgBN,GAASO,KAAKH,EACjC,GAAE,CAACJ,IAEsC,IAAnBG,EAAQK,QAI3B,SAACb,EAAD,wDAEA,SAACE,EAAD,UACKM,EAAQM,KAAI,SAAAC,GACT,IAAOC,EAAuBD,EAAvBC,GAAIC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,OACpB,OACI,UAACf,EAAD,YACI,SAACH,EAAD,WAAa,oCAAYkB,QACzB,SAACd,EAAD,UAAiBa,MAFCD,EAK7B,KAGZ,C,8LC7BDG,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACNF,EAAAA,GAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,OAEvBC,EAAiBD,EAASE,KAAKC,QAAQX,KAAI,SAAAY,GAE7C,MAAO,CACHV,GAFgBU,EAAbV,GAGHW,MAHgBD,EAATC,MAKd,IAR4B,kBAStBJ,GATsB,2CAAH,qDAYjBK,EAAmB,SAACC,GAC7B,OAAOC,MAAM,qDAAD,OAAsDV,EAAtD,wCAA6FS,IACpGjB,MAAK,SAAAU,GAAQ,OAAIA,EAASS,MAAb,IACbnB,MAAK,SAAAY,GACF,IAAMQ,EAAYR,EAAKC,QAAQX,KAAI,SAAAY,GAE/B,MAAO,CACHV,GAFkBU,EAAdV,GAGJW,MAHkBD,EAAVC,MAKf,IAED,OAAyB,IAArBK,EAAUnB,QACVoB,MAAM,yDACC,IAGJD,CACV,GACR,EAEYE,EAAe,mCAAG,WAAOlB,GAAP,qGACJG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCI,IAD7B,cACrBE,EADqB,SAGgDA,EAASE,KAA7EW,EAHoB,EAGpBA,aAAcR,EAHM,EAGNA,MAAOS,EAHD,EAGCA,SAAUC,EAHX,EAGWA,OAAQC,EAHnB,EAGmBA,YAAaC,EAHhC,EAGgCA,aAHhC,kBAKpB,CACHJ,aAAAA,EACAR,MAAAA,EACAS,SAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,aAAAA,IAXuB,2CAAH,sDAcfC,EAAY,mCAAG,WAAOxB,GAAP,yFACDG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,oBADC,cAClBE,EADkB,OAGlBmB,EAAWnB,EAASE,KAAKkB,KAAK5B,KAAI,SAAA6B,GAEpC,MAAO,CACHC,KAFwCD,EAArCC,KAGHC,UAHwCF,EAA/BE,UAITC,aAJwCH,EAApBG,aAKpB9B,GALwC2B,EAAN3B,GAMzC,IAVuB,kBAYjByB,GAZiB,2CAAH,sDAeZ9B,EAAe,mCAAG,WAAOK,GAAP,yFACJG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,2BADI,cACrBE,EADqB,OAErBd,EAAUc,EAASE,KAAKC,QAAQX,KAAI,SAAA6B,GAEtC,MAAO,CACH3B,GAF2B2B,EAAxB3B,GAGHE,OAH2ByB,EAApBzB,OAIPD,QAJ2B0B,EAAZ1B,QAKtB,IAR0B,kBAUpBT,GAVoB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsText = styled.p`\n    color: black;\n`;\n\nexport const ReviewsList = styled.ul`\n    list-style-type: none;\n    margin-top: 20px;\n`;\n\nexport const ReviewsListItem = styled.li`\n`;\n\nexport const ReviewsContent = styled.p`\n    max-width: auto;\n    margin-right: 20px;\n    padding: 5px;\n    border: 1px grey solid;\n    box-shadow: 4px 4px 4px 2px rgba(0, 0, 0, 0.3);\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"services/api\";\nimport { ReviewsText, ReviewsList, ReviewsListItem, ReviewsContent } from './Reviews.styled';\n\nconst Reviews = () => {\n    const {movieId} = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        getMovieReviews(movieId).then(setReviews)\n    }, [movieId]);\n\n    const isReviewsEmpty = reviews.length === 0;\n    \n    return (\n        isReviewsEmpty ? \n        <ReviewsText>We don't have any reviews for this movie</ReviewsText>\n        :\n        <ReviewsList>\n            {reviews.map(review => {\n                const {id, content, author} = review;\n                return (\n                    <ReviewsListItem key={id}>\n                        <ReviewsText><b>Author: {author}</b></ReviewsText>\n                        <ReviewsContent>{content}</ReviewsContent>\n                    </ReviewsListItem>\n                )\n            })}\n        </ReviewsList>\n    )\n}\n\nexport default Reviews;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"b39d2fa1d0f98778a06603bc9566573a\";\n\nexport const getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    const trendingMovies = response.data.results.map(movie => {\n        const {id, title} = movie;\n        return {\n            id,\n            title\n        }\n    })\n    return trendingMovies;\n};\n\nexport const getMovieOnSearch = (searchQuery) => {\n    return fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`)\n        .then(response => response.json())\n        .then(data => {\n            const movieList = data.results.map(movie => {\n                const { id, title } = movie;\n                return {\n                    id,\n                    title\n                }\n            })\n    \n            if (movieList.length === 0) {\n                alert(\"We can't found anythings, please repeate your request\")\n                return [];\n            }\n\n            return movieList;\n        });\n}\n\nexport const getMovieDetails = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n    const {vote_average, title, overview, genres, poster_path, release_date} = response.data;\n\n    return {\n        vote_average,\n        title,\n        overview,\n        genres, \n        poster_path,\n        release_date}\n};\n\nexport const getMovieCast = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n\n    const castInfo = response.data.cast.map(a => {\n        const {name, character, profile_path, id} = a;\n        return {\n            name,\n            character,\n            profile_path,\n            id}\n    });\n\n    return castInfo;\n};\n\nexport const getMovieReviews = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data.results.map(a => {\n        const {id, author, content } = a;\n        return {\n            id,\n            author,\n            content}\n    });  \n    \n    return reviews;\n}"],"names":["ReviewsText","styled","ReviewsList","ReviewsListItem","ReviewsContent","movieId","useParams","useState","reviews","setReviews","useEffect","getMovieReviews","then","length","map","review","id","content","author","axios","API_KEY","getTrendingMovies","response","trendingMovies","data","results","movie","title","getMovieOnSearch","searchQuery","fetch","json","movieList","alert","getMovieDetails","vote_average","overview","genres","poster_path","release_date","getMovieCast","castInfo","cast","a","name","character","profile_path"],"sourceRoot":""}
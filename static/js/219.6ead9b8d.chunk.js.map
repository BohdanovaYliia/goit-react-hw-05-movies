{"version":3,"file":"static/js/219.6ead9b8d.chunk.js","mappings":"iPAEaA,EAAWC,EAAAA,GAAAA,GAAH,wHAQRC,EAAeD,EAAAA,GAAAA,GAAH,6F,SCwBzB,EA3Ba,WACT,IAAOE,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAaN,GAASO,KAAKH,EAC9B,GAAE,CAACJ,IAEoB,IAApBG,EAASK,OACF,MAIP,SAACX,EAAD,UACKM,EAASM,KAAI,SAAAC,GACV,IAAOC,EAAqCD,EAArCC,KAAMC,EAA+BF,EAA/BE,UAAWC,EAAoBH,EAApBG,aAAcC,EAAMJ,EAANI,GAEtC,OAAO,UAACf,EAAD,YACH,gBAAKgB,IApBF,mCAoBwBF,EAAcG,IAAKL,KAC9C,uBAAIA,KACJ,uCAAeC,OAHOE,EAK7B,KAGZ,C,8LC9BDG,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACNF,EAAAA,GAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,OAEvBC,EAAiBD,EAASE,KAAKC,QAAQd,KAAI,SAAAe,GAE7C,MAAO,CACHV,GAFgBU,EAAbV,GAGHW,MAHgBD,EAATC,MAKd,IAR4B,kBAStBJ,GATsB,2CAAH,qDAYjBK,EAAmB,SAACC,GAC7B,OAAOC,MAAM,qDAAD,OAAsDV,EAAtD,wCAA6FS,IACpGpB,MAAK,SAAAa,GAAQ,OAAIA,EAASS,MAAb,IACbtB,MAAK,SAAAe,GACF,IAAMQ,EAAYR,EAAKC,QAAQd,KAAI,SAAAe,GAE/B,MAAO,CACHV,GAFkBU,EAAdV,GAGJW,MAHkBD,EAAVC,MAKf,IAED,OAAyB,IAArBK,EAAUtB,QACVuB,MAAM,yDACC,IAGJD,CACV,GACR,EAEYE,EAAe,mCAAG,WAAOlB,GAAP,qGACJG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCI,IAD7B,cACrBE,EADqB,SAGgDA,EAASE,KAA7EW,EAHoB,EAGpBA,aAAcR,EAHM,EAGNA,MAAOS,EAHD,EAGCA,SAAUC,EAHX,EAGWA,OAAQC,EAHnB,EAGmBA,YAAaC,EAHhC,EAGgCA,aAHhC,kBAKpB,CACHJ,aAAAA,EACAR,MAAAA,EACAS,SAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,aAAAA,IAXuB,2CAAH,sDAcf/B,EAAY,mCAAG,WAAOQ,GAAP,yFACDG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,oBADC,cAClBE,EADkB,OAGlBjB,EAAWiB,EAASE,KAAKgB,KAAK7B,KAAI,SAAA8B,GAEpC,MAAO,CACH5B,KAFwC4B,EAArC5B,KAGHC,UAHwC2B,EAA/B3B,UAITC,aAJwC0B,EAApB1B,aAKpBC,GALwCyB,EAANzB,GAMzC,IAVuB,kBAYjBX,GAZiB,2CAAH,sDAeZqC,EAAe,mCAAG,WAAO1B,GAAP,yFACJG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,2BADI,cACrBE,EADqB,OAErBqB,EAAUrB,EAASE,KAAKC,QAAQd,KAAI,SAAA8B,GAEtC,MAAO,CACHzB,GAF2ByB,EAAxBzB,GAGH4B,OAH2BH,EAApBG,OAIPC,QAJ2BJ,EAAZI,QAKtB,IAR0B,kBAUpBF,GAVoB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  list-style: none;\n  padding-left: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const CastListItem = styled.li`\n  border: 1px gray solid;\n  padding: 5px;  \n  text-align: center;\n`;","import { useEffect,  useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCast } from \"services/api\";\nimport { CastList, CastListItem } from './Cast.styled';\n\nconst BASE_PHOTO_URL = \"https://image.tmdb.org/t/p/w200/\";\n\nconst Cast = () => {\n    const {movieId} = useParams();\n    const [castInfo, setCastInfo] = useState([]);\n\n    useEffect(() => {\n        getMovieCast(movieId).then(setCastInfo);\n    }, [movieId]);\n\n    if (castInfo.length === 0) {\n        return null;\n    }\n\n    return (\n        <CastList>\n            {castInfo.map(actor => {\n                const {name, character, profile_path, id} = actor;\n\n                return <CastListItem key={id}>\n                    <img src={BASE_PHOTO_URL + profile_path} alt={name}/>\n                    <p>{name}</p>\n                    <p>Character: {character}</p>\n                </CastListItem>\n            })}\n        </CastList>\n    )\n}\n\nexport default Cast;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"b39d2fa1d0f98778a06603bc9566573a\";\n\nexport const getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    const trendingMovies = response.data.results.map(movie => {\n        const {id, title} = movie;\n        return {\n            id,\n            title\n        }\n    })\n    return trendingMovies;\n};\n\nexport const getMovieOnSearch = (searchQuery) => {\n    return fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`)\n        .then(response => response.json())\n        .then(data => {\n            const movieList = data.results.map(movie => {\n                const { id, title } = movie;\n                return {\n                    id,\n                    title\n                }\n            })\n    \n            if (movieList.length === 0) {\n                alert(\"We can't found anythings, please repeate your request\")\n                return [];\n            }\n\n            return movieList;\n        });\n}\n\nexport const getMovieDetails = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n    const {vote_average, title, overview, genres, poster_path, release_date} = response.data;\n\n    return {\n        vote_average,\n        title,\n        overview,\n        genres, \n        poster_path,\n        release_date}\n};\n\nexport const getMovieCast = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n\n    const castInfo = response.data.cast.map(a => {\n        const {name, character, profile_path, id} = a;\n        return {\n            name,\n            character,\n            profile_path,\n            id}\n    });\n\n    return castInfo;\n};\n\nexport const getMovieReviews = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data.results.map(a => {\n        const {id, author, content } = a;\n        return {\n            id,\n            author,\n            content}\n    });  \n    \n    return reviews;\n}"],"names":["CastList","styled","CastListItem","movieId","useParams","useState","castInfo","setCastInfo","useEffect","getMovieCast","then","length","map","actor","name","character","profile_path","id","src","alt","axios","API_KEY","getTrendingMovies","response","trendingMovies","data","results","movie","title","getMovieOnSearch","searchQuery","fetch","json","movieList","alert","getMovieDetails","vote_average","overview","genres","poster_path","release_date","cast","a","getMovieReviews","reviews","author","content"],"sourceRoot":""}